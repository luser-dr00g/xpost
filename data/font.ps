% Type 3 font handling

% Many font operators are implemented as C functions and
% these use fontconfig and freetype to access host OS  fonts.
% see src/lib/xpost_font.[ch] and src/lib/xpost_op_font.[ch]

% These procedures interface with the built-in operators,
% performing special handling for Type 3 (postscript) fonts,
% and calling the C operators for all other types.

/QUIET where { pop }{ (loading font.ps...)print } ifelse

/definefont { % /fontname -dict-
    dup type /dicttype ne
    2 index type /nulltype eq or {
        /definefont cvx /typecheck signalerror
    } if
    {
        dup /FontType known not {stop} if
        dup /FontMatrix known not {stop} if
        dup /Encoding known not {stop} if
        dup /BuildChar known not {stop} if
    } stopped {
        /definefont cvx /invalidfont signalerror
    } if
    dup /FontName known not {
        dup /FontName 3 index put
    } if
    FontDirectory exch 2 index exch put
    findfont
} def

/scalefont {
    1 index /FontType get 3 ne {
        0 dtransform
        dup mul exch dup mul add sqrt
        //scalefont
    }{
        dup matrix scale makefont
    } ifelse
} def

/makefont {
    1 index /FontType get 3 ne { % font mat
        dup aload pop % font mat a b c d e f
        6 dict begin {/e/f/d/c/b/a}{exch def}forall % font mat
            a a mul b b mul add sqrt % font mat scale
            3 copy exch pop scalefont pop
            1 exch div % font mat 1/scale
            dup matrix scale % font mat invscalemat
            matrix concatmatrix % font mat-scale
        end % font mat
        //makefont
    }{
        1 index /FontMatrix get dup concatmatrix pop
        %pstack()=
    } ifelse
} def

/setcharwidth {
    graphicsdict /currgstate get /currfont get
    dup /xadvance 5 4 roll put
    /yadvance 3 2 roll put
} def

/setcachedevice {
    pop pop pop pop
    setcharwidth
} def

/show {
    graphicsdict /currgstate get /currfont get
    dup /FontType get 3 ne { pop //show }{
    gsave
        currentpoint translate
        newpath
        dup /FontMatrix get concat
        exch
        %pstack()=
        {
            gsave
                1 index /BuildChar get exec
            grestore
            graphicsdict /currgstate get /currfont get
            dup /xadvance get 1 index /yadvance get
            translate
            %hook
        } forall
        pop
        0 0 transform  % use device-space coordinates to save location past grestore
    grestore
    itransform moveto

    } ifelse
} def

/widthshow {
    graphicsdict /currgstate get /currfont get
    dup /FontType get 3 ne {
        pop
        4 2 roll dtransform
        4 2 roll
        //widthshow
    }{
    5 2 roll
    3 dict begin
    {charcode cy cx}{exch def}forall
    gsave
        currentpoint translate
        newpath
        dup /FontMatrix get
        dup concat
        cx cy 3 2 roll dtransform /cy exch def /cx exch def
        exch
        %pstack()=
        {
            dup /curcode exch def
            gsave
                1 index /BuildChar get exec
            grestore
            graphicsdict /currgstate get /currfont get
            dup /xadvance get 1 index /yadvance get
            translate
            curcode charcode eq {
                cx cy translate
            } if
            %hook
        } forall
        pop
        0 0 transform
    grestore
    end
    itransform moveto

    } ifelse
} def

/ashow {
    graphicsdict /currgstate get /currfont get
    dup /FontType get 3 ne {
        pop
        3 1 roll dtransform
        3 2 roll
        //ashow
    }{
    4 2 roll
    2 dict begin
    {dy dx}{exch def}forall
    gsave
        currentpoint translate
        newpath
        dup /FontMatrix get
        dup concat
        dx dy 3 2 roll dtransform /dy exch def /dx exch def
        exch
        %pstack()=
        {
            gsave
                1 index /BuildChar get exec
            grestore
            graphicsdict /currgstate get /currfont get
            dup /xadvance get 1 index /yadvance get
            translate
            dx dy translate
            %hook
        } forall
        pop
        0 0 transform
    grestore
    end
    itransform moveto

    } ifelse
} def

/awidthshow {
    graphicsdict /currgstate get /currfont get
    dup /FontType get 3 ne {
        pop
        5 1 roll dtransform
        5 3 roll dtransform
        5 2 roll
        //awidthshow
    }{
    7 2 roll
    5 dict begin
    {charcode cy cx dy dx}{exch def}forall
    gsave
        currentpoint translate
        newpath
        dup /FontMatrix get
        dup concat
        dup dx dy 3 2 roll dtransform /dy exch def /dx exch def
        cx cy 3 2 roll dtransform /cy exch def /cx exch def
        exch
        %pstack()=
        {
            dup /curcode exch def
            gsave
                1 index /BuildChar get exec
            grestore
            graphicsdict /currgstate get /currfont get
            dup /xadvance get 1 index /yadvance get
            translate
            dx dy translate
            curcode charcode eq {
                cx cy translate
            } if
            %hook
        } forall
        pop
        0 0 transform
    grestore
    end
    itransform moveto

    } ifelse
} def

/kshow {
    5 dict begin
        {str proc}{exch def}forall
        /font graphicsdict /currgstate get /currfont get def
        str length 0 gt { str length 1 eq {
            str show
        }{
            str 0 1 getinterval % str<0..+1>
            dup 0 get exch      % str[0] str<0..+1>
            show
            1 1 str length 1 sub { % str[N-1] N
                str exch 1 getinterval
                dup 0 get exch % str[N-1] str[N] str<N..+1>
                3 1 roll       % str<N..+1>  str[N-1] str[N]
                proc
                dup 0 get exch  % str[N]  str<N..+1>
                show  % str[N]
            } for
        } ifelse } if
    end
} def

/stringwidth {
    graphicsdict /currgstate get /currfont get
    dup /FontType get 3 ne { pop //stringwidth }{
    pop
    gsave
        nulldevice
        currentpoint 3 2 roll
        show
        currentpoint % x0 y0 x1 y1
        3 2 roll sub % x0 x1 y1-y0
        3 1 roll exch sub % y1-y0 x1-x0
        exch
    grestore
    } ifelse
} def

/charpath {
    %currentfont /FontName get ==
    pop
    stringwidth
    currentpoint
    currentpoint currentfont /FontMatrix get 0 get .5 mul 1 index add exch
    0 360 arc
    moveto rmoveto
} def

/ISOLatin1Encoding [
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl /numbersign
    /dollar /percent /ampersand /quoteright /parenleft /parenright /asterisk /plus
    /comma /minus /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C /D /E /F /G
    /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
    /bracketright /asciicircum /underscore /quoteleft /a /b /c /d /e /f /g /h /i /j
    /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
    /asciitilde /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent /dieresis
    /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron /space /exclamdown
    /cent /sterling /currency /yen /brokenbar /section /dieresis /copyright /ordfeminine
    /guillemotleft /logicalnot /hyphen /registered /macron /degree /plusminus /twosuperior
    /threesuperior /acute /mu /paragraph /periodcentered /cedilla /onesuperior
    /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
    /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave
    /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply /Oslash /Ugrave
    /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls /agrave /aacute
    /acircumflex /atilde /adieresis /aring /ae /ccedilla /egrave /eacute /ecircumflex
    /edieresis /igrave /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute /ucircumflex
    /udieresis /yacute /thorn /ydieresis
] def

/QUIET where { pop }{ (eof font.ps\n)print } ifelse

