/QUIET where { pop }{ (loading gstate.ps...)print } ifelse

% gstatetemplate yields a freshly-initialized dictionary
% with the following values. currmatrix and scratchmatrix
% are newly-allocated arrays.
/gstatetemplate <<
    /colorspace /DeviceGray
    /colorcomp1 0
    /colorcomp2 0
    /colorcomp3 0
    /colorcomp4 0
    /transfer {}
    %/currmatrix DEVICE /defaultmatrix get matrix copy
    %/currmatrix [ 1 0 0 1 0 0 ]
    %/scratchmatrix [ 1 0 0 1 0 0 ] % ??
    /currpath 1 dict
    /clipregion 1 dict
    /flat 1
    /linewidth 1
    /linecap 0
    /linejoin 2
    /miterlimit 0.0
    /overprint false
    /dasharray []
    /dashoffset 0
    /currfont 1 dict
    /device DEVICE
>> def
/gstatetemplate { //gstatetemplate % use template
    dup /currmatrix [ 1 0 0 1 0 0 ] put  % allocate fresh arrays
    dup /scratchmatrix [ 1 0 0 1 0 0 ] put
} def



% Graphics State Operators -- Device Independent

/deepcopy { % dict1 dict2 . dict2'
    begin
    {
        dup type /arraytype eq
        1 index xcheck not and {
            dup length array
            copy
            def
        }{
            dup type /dicttype eq {
                dup maxlength dict deepcopy
                def
            }{
                def
            } ifelse
        } ifelse
    } forall
    currentdict end
} def

/gstatecopy { % dict1 dict2 . dict2'
    begin
    { % key val
        %pstack()= %1 index =
        dup type /arraytype eq
        1 index xcheck not and { % key val
            1 index % key val key
            currentdict 1 index known { % key val key  (key known in currentdict)
                currentdict exch get % key val dict2-val
                2 copy length exch length exch % key val dict2-val n d2-n
                le {
                    copy % key dict2-val
                    pop pop
                }{
                    pop dup length array
                    copy
                    def
                } ifelse
            }{ % key val key   (key not known in currentdict)
                exch % key key val
                dup length array % key key val val2
                copy % key key val2
                def
                pop
            } ifelse
        }{  % not arraytype
            1 index /currpath eq {
                %1 dict deepcopy % perform deep copy on path dict
                def
            }{
                def
            } ifelse
        } ifelse
    } forall
    currentdict end
} def

% -  gsave  -
% push graphics state
/gsave {
graphicsdict begin
    /gptr gptr 1 add def
    gptr gstackarray length ge { error } if
    gstackarray gptr gstate currentgstate put % push copy on stack
    currgstate /currpath 2 copy get 1 dict deepcopy put % make a new working copy of path
end
} def

% -  grestore  -
% pop graphics state
/grestore {
graphicsdict begin
    gptr -1 gt {
        gstackarray gptr get
            %dup {exch = ==} forall
        currgstate gstatecopy pop
        gptr 0 gt { %discard all but one element, for grestoreall
            gstackarray gptr null put % discard stack copy
        } if
        /gptr gptr 1 sub def
    } if
end
} def

% -  grestoreall  -
% pop to bottommost graphics state
/grestoreall {
graphicsdict begin
    /gptr -1 def
    gstackarray 0 get
    currgstate gstatecopy pop
end
} def

% -  initgraphics  -
% reset graphics state parameters
/initgraphics {
    break
    gstate setgstate
    initmatrix
    /QUIET where { pop }{ matrix currentmatrix == } ifelse
    %(initclip)=
    initclip
    %(erasepage)=
    erasepage
    %(0 setgray)=
    0 setgray
} def

% -  gstate  gstate
% create graphics state object
/gstate {
    gstatetemplate dup length dict copy
} def

% gstate  setgstate  -
% set graphics state from gstate
/setgstate {
    graphicsdict /currgstate get copy pop
} def

% gstate  currentgstate  gstate
% copy current graphics state into given gstate object
/currentgstate {
    graphicsdict /currgstate get exch gstatecopy
} def

% -  currentfont  dict
% return current font from the graphics state
/currentfont {
    graphicsdict /currgstate get /currfont get
} def

% proc  settransfer  -
% install gray-tranfer procedure
/settransfer {
    graphicsdict /currgstate get exch /transfer exch put
} def

% -  currenttransfer  proc
% return installed gray-transfer procedure
/currenttransfer {
    graphicsdict /currgstate get /transfer get
} def

% num  setlinewidth  -
% set line width
/setlinewidth {
    graphicsdict /currgstate get exch /linewidth exch put
} def

% -  currentlinewidth  num
% return current line width
/currentlinewidth {
    graphicsdict /currgstate get /linewidth get
} def

% int  setlinecap  -
% set shape of the ends for stroke (0=butt, 1=round, 2=square)
/setlinecap {
    graphicsdict /currgstate get exch /linecap exch put
} def

% -  currentlinecap  int
% return current line cap
/currentlinecap {
    graphicsdict /currgstate get /linecap get
} def

% array offset  setdash  -
/setdash {
    graphicsdict /currgstate get exch /dashoffset exch put
    graphicsdict /currgstate get exch /dasharray exch put
} def

% -  currentdash  array offset
/currentdash {
    graphicsdict /currgstate get /dasharray get
    graphicsdict /currgstate get /dashoffset get
} def

% int  setlinejoin  -
% set shape of corners for stroke (0=miter, 1=round, 2=bevel)
/setlinejoin {
    graphicsdict /currgstate get exch /linejoin exch put
} def

% -  currentlinejoin  int
% return current line join
/currentlinejoin {
    graphicsdict /currgstate get /linejoin get
} def

% num  setmiterlimit  -
/setmiterlimit {
    graphicsdict /currgstate get exch /miterlimit exch put
} def

% -  currentmiterlimit  num
/currentmiterlimit {
    graphicsdict /currgstate get /miterlimit get
} def

% bool  setoverprint  -
/setoverprint {
    graphicsdict /currgstate get exch /overprint exch put
} def

% -  currentoverprint  bool
/currentoverprint {
    graphicsdict /currgstate get /overprint get
} def


% Graphics State Operators -- Device Dependent

/setflat {
    /CONSTRAINFLATNESS where{
        pop dup 100 gt{pop 100}if dup .2 lt{pop .2}if } if
    graphicsdict /currgstate get exch /flat exch put
} def

/currentflat {
    graphicsdict /currgstate get /flat get
} def


/QUIET where { pop }{ (eof gstate.ps\n)print } ifelse
